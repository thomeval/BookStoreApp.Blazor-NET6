@using BookStoreApp.Blazor.WebAssembly.UI.Models
@inject IAuthorService _authorService;
@inject IJSRuntime _js;

<table class="table table-responsive">
    <thead>
    <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Actions</th>
    </tr>
    </thead>
<tbody>
<Virtualize ItemsProvider="LoadAuthors" Context="author">
    <tr>

        <td>@author.FirstName</td>
        <td>@author.LastName</td>
        <td>
            <a class="btn btn-primary" href="/authors/details/@author.Id"><span class="oi oi-document" aria-hidden="true"></span>Details</a>

            <AuthorizeView Roles="Admin">
                <Authorized>
                    <a class="btn btn-warning" href="/authors/update/@author.Id"><span class="oi oi-pencil" aria-hidden="true"></span>Edit</a>
                    <button class="btn btn-danger" @onclick=@(() => DeleteAuthor(author.Id))><span class="oi oi-trash" aria-hidden="true"></span>Delete</button>
                </Authorized>
            </AuthorizeView>

        </td>
    </tr>
</Virtualize>


</tbody>

</table>

@code {

    [Parameter]
    public List<AuthorGetAllDto>? Authors { get; set; }

    [Parameter]
    public int TotalSize { get; set; }

    [Parameter]
    public EventCallback<QueryParameters> OnScroll { get; set; }

    private async ValueTask<ItemsProviderResult<AuthorGetAllDto>> LoadAuthors(ItemsProviderRequest request)
    {
        var authorNum = Math.Min(request.Count, TotalSize - request.StartIndex);
        var queryParams = new QueryParameters
        {
            StartIndex = request.StartIndex,
            PageSize = authorNum == 0 ? request.Count : authorNum
        };
        await OnScroll.InvokeAsync(queryParams);

        return new ItemsProviderResult<AuthorGetAllDto>(Authors!, TotalSize);

    }

    private async Task DeleteAuthor(int authorId)
    {
        if (Authors == null)
        {
            return;
        }

        var author = Authors.Single(e => authorId == e.Id);
        var confirm = await _js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {author.FirstName} {author.LastName}?");

        if (!confirm)
        {
            return;
        }

        var response = await _authorService.Delete(authorId);

        if (response.Success)
        {
            await OnInitializedAsync();
        }
    }
}
