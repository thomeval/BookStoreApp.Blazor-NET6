@page "/authors"
@inject IAuthorService _authorService;
@inject IJSRuntime _js;

<h3>Authors</h3>

@if (!_response.Success)
{
    <div class="alert alert-danger">
        <h4>@_response.Message</h4>
    </div>
}
else
{
    @if (_authors == null)
    {
        <div class="alert alert-info">
            <h4>Loading...</h4>
        </div>

    }
    else
    {
        <AuthorizeView Roles="Admin">
            <Authorized>
                <a class="btn btn-primary" href="/authors/create"><span class="oi oi-plus" aria-hidden="true"></span> Create</a>
            </Authorized>
        </AuthorizeView>


        <br/>
        <table class="table table-responsive">
            <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var author in _authors)
            {
                <tr>

                    <td>@author.FirstName</td>
                    <td>@author.LastName</td>
                    <td>
                        <a class="btn btn-primary" href="/authors/details/@author.Id"><span class="oi oi-document" aria-hidden="true"></span>Details</a>
                        
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                <a class="btn btn-warning" href="/authors/update/@author.Id"><span class="oi oi-pencil" aria-hidden="true"></span>Edit</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAuthor(author.Id))><span class="oi oi-trash" aria-hidden="true"></span>Delete</button>
                            </Authorized>
                        </AuthorizeView>

                    </td>
                </tr>
            }

            </tbody>

        </table>
    }
}
@code {
    private List<AuthorGetAllDto>? _authors;
    private Response<List<AuthorGetAllDto>> _response = new() { Success = true };

    protected override async Task OnInitializedAsync()
    {
        _response = await _authorService.GetAll();

        if (_response.Success)
        {
            _authors = _response.Data;
        }
    }

    private async Task DeleteAuthor(int authorId)
    {
        if (_authors == null)
        {
            return;
        }

        var author = _authors.Single(e => authorId == e.Id);
        var confirm = await _js.InvokeAsync<bool>("confirm",$"Are you sure you want to delete {author.FirstName} {author.LastName}?");

        if (!confirm)
        {
            return;
        }

        var response = await _authorService.Delete(authorId);

        if (response.Success)
        {
            await OnInitializedAsync();
        }
    }

}
